#!/usr/bin/perl

#
# Dryuf framework
#
# ----------------------------------------------------------------------------------
#
# Copyright (C) 2000-2015 Zbyněk Vyškovský
#
# ----------------------------------------------------------------------------------
#
# LICENSE:
#
# This file is part of Dryuf
#
# Dryuf is free software; you can redistribute it and/or modify it under the
# terms of the GNU Lesser General Public License as published by the Free
# Software Foundation; either version 3 of the License, or (at your option)
# any later version.
#
# Dryuf is distributed in the hope that it will be useful, but WITHOUT ANY
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
# FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
# more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with Dryuf; if not, write to the Free Software Foundation, Inc., 51
# Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
#
# @author	2000-2015 Zbyněk Vyškovský
# @link		mailto:kvr@matfyz.cz
# @link		http://kvr.matfyz.cz/software/java/dryuf/
# @link		http://github.com/dryuf/
# @license	http://www.gnu.org/licenses/lgpl.txt GNU Lesser General Public License v3
#

use strict;
use warnings;

use FileHandle;
use File::Basename;
use Data::Dumper;
use Getopt::Std;
use IPC::Open3;
use File::Path;

use lib dirname($0)."/perl";
use net::dryuf::uml::Util;

sub origToGen($)
{
	my $s				= shift;

	return "_".$s;
}

sub runSys
{
	my $maxret			= shift;
	my $wd				= shift;
	my $in				= shift;
	my $out				= shift;

	my $cmd = "cd $wd && ".join(" ", @_);
	#STDERR->print("running $cmd\n");
	my $pid = fork()
		// net::dryuf::uml::Util::doDie("failed to fork: $!");
	
	if ($pid == 0) {
		if ($in) {
			open(STDIN, "<&", $in)
				or net::dryuf::uml::Util::doDie("failed to dup STDIN: $!");
		}
		if ($out) {
			open(STDOUT, ">&", $out)
				or net::dryuf::uml::Util::doDie("failed to dup STDOUT: $!");
		}
		chdir($wd);
		exec(@_)
			or net::dryuf::uml::Util::doDie("failed to exec $cmd: $!");
	}
	waitpid($pid, 0);
	net::dryuf::uml::Util::doDie("failed to run $cmd: $?") if (($?&0xff) || ($?>>8) > $maxret);
}

sub runBackup
{
	my $origSrc			= shift;

	mkpath("_tmp/$origSrc");
	my $lastBackup = 0;
	for ($lastBackup = 0; -d "_tmp/$origSrc/$lastBackup"; $lastBackup++) {}
	if ($lastBackup > 9) {
		--$lastBackup;
		runSys(0, "_tmp/$origSrc", undef, undef, "rm", "-rf", $lastBackup);
	}
	while ($lastBackup > 0) {
		runSys(0, "_tmp/$origSrc", undef, undef, "mv", $lastBackup-1, $lastBackup);
		--$lastBackup;
	}
	mkpath("_tmp/$origSrc/0");
	runSys(0, ".", undef, undef, "cp", "--reflink=auto", "-Ra", origToGen($origSrc)."/.", "_tmp/$origSrc/0/.");
}


net::dryuf::uml::Util::installDryufEnv();

our %opts;
getopts('hdpsb', \%opts)
	or exit(2);

if ($opts{h}) {
	STDERR->print(<<EOS
Usage: [-h] {-d|-p|-s|-b}\n
-h	help
-d	run diff on generated directory
-p	run patch on original directory
-s	run full sync (-d -p -b)
-b	run backup
EOS
	);
}
if (@ARGV != 1) {
	STDERR->print("missing argument: source_dir\n");
	exit(2);
}
our $origSrc = shift @ARGV;
$origSrc =~ s,/*$,,;

our $origLen = split(/\//, $origSrc);

mkpath("_tmp");
if ($opts{d}) {
	runSys(1, ".", undef, undef, "diff", "-urN", "--exclude=*.sw?", "_tmp/$origSrc/0/", origToGen($origSrc));
}
elsif ($opts{p}) {
	runSys(0, "$origSrc", undef, undef, "patch", "-p$origLen");
}
elsif ($opts{s}) {
	net::dryuf::uml::Util::doDie("_tmp/b-$origSrc/0 does not exist, did you forgot to run -b first?") unless (-d "_tmp/$origSrc/0");
	runSys(1, ".", undef, FileHandle->new("_tmp/$origSrc.diff", ">"), "diff", "--exclude=*.sw?", "--exclude=*.class", "-urN", "_tmp/$origSrc/0/", origToGen($origSrc));
	runSys(0, "$origSrc", FileHandle->new("_tmp/$origSrc.diff", "<"), undef, "patch", "-p$origLen");
	runBackup($origSrc);
}
elsif ($opts{b}) {
	runBackup($origSrc);
}
else {
	STDERR->print("missing command, run -h for help\n");
	exit(2);
}
exit(0);
